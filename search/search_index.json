{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quick Start","text":"<ol> <li> <p>Install <code>node-scripts-docs</code>:</p> yarnnpm <pre><code>yarn add -D node-scripts-docs\n</code></pre> <pre><code>npm install -D node-scripts-docs\n</code></pre> </li> <li> <p>Run an initial check on your project:</p> yarnnpm <pre><code>yarn nsd --check-only\n</code></pre> <pre><code>npx nsd --check-only\n</code></pre> <p>Hint</p> <p>To run <code>nsd</code> on another project, you can simply pass the directory as an unlabeled argument:</p> yarnnpm <pre><code>yarn nsd ~/projects/myrepo --check-only\n</code></pre> <pre><code>npx nsd ~/projects/myrepo --check-only\n</code></pre> </li> <li> <p>Drop the <code>--check-only</code> to write the initial documentation scaffold. Then begin editing the descriptions in the generated documentation fragments right away.</p> <p>Whenever you've added scripts, removed scripts, updated documentation fragments, just run <code>yarn nsd</code> again to synchronize the documentation and the scripts.</p> </li> </ol> <p>Info</p> <p>By default, this tool will only operate on scripts that either are defined in the root manifest, or have a <code>:</code> in their name. By <code>yarn</code> definition, the latter are globally available scripts throughout the monorepo. This tool is primarily designed for that scenario.</p> <p>However, you can pass <code>--include-locals</code> to also include all other scripts in the build. If you are working in a monorepo, where multiple workspaces define the same script (like <code>test</code>), this will result in collisions that are currently unhandled.</p>"},{"location":"#sample-output","title":"Sample output","text":"<pre><code>node-scripts-docs (2022-01-22T20:56:40.834Z)\nWorking directory: /home/oliver/projects/node-scripts-docs\nManifest: package.json (exists) [node-scripts-docs@0.0.2]\nMetadata store: package.json-scripts.json (exists)\nDocs location: docs/reference/yarn Scripts/ (exists)\nFinding all scripts in all workspaces...\nFound 1 manifest(s).\nManifests contain 5 script(s), 3 as global.\nLoading existing metadata...\nStore contains 4 script(s).\nLoading existing fragments...\nDocs contain 2 fragment(s).\n --- Pending documentation ---\n  docs:build\u2192node-scripts-docs\n\n --- New scripts ---\n  npm:publish\u2192node-scripts-docs\n\nAugmenting metadata with existing documentation fragment data...\nAugmentation complete.\nFlushing metadata...\nProcess completed in 56.703ms.\n</code></pre>"},{"location":"reference/CLI%20Parameters/","title":"CLI Usage","text":"Parameter Default Description <code>--check-only</code> Only perform checks, don't update files. <code>--cwd</code> Set the working directory. <code>--docs-location</code> <code>docs/reference/Repository Scripts/</code> Storage location for documentation fragments. <code>--include-locals</code> Include all scripts in checks. <code>--skip-pending</code> Don't show pending documentation items in report. <code>--skip-scan</code> Don't scan for changes in <code>scripts</code> sections. <code>--store</code> <code>package.json-scripts.json</code> Name of the metadata store."},{"location":"reference/Repository%20Scripts/","title":"Full reference","text":""},{"location":"reference/Repository%20Scripts/#build","title":"build","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>tsc\n</code></pre> </li> <li> <p>Description:</p> <p>Build the TypeScript sources.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsbuild","title":"docs:build","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>podman run --rm -it -p 8000:8000 -v ${PWD}:/docs docker.io/squidfunk/mkdocs-material build --site-dir=public\n</code></pre> </li> <li> <p>Description:</p> <p>Build the documentation website locally.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsscripts","title":"docs:scripts","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>yarn nsd-debug\n</code></pre> </li> <li> <p>Description:</p> <p>Rebuilds the <code>node-scripts-docs</code> documentation for this project itself.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#docsserve","title":"docs:serve","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>podman run --rm -it -p 8000:8000 -v ${PWD}:/docs docker.io/squidfunk/mkdocs-material\n</code></pre> </li> <li> <p>Description:</p> <p>Runs the mkdocs-material development server.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#npmpublish","title":"npm:publish","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>npm publish\n</code></pre> </li> <li> <p>Description:</p> <p>Build the latest sources and then <code>npm publish</code> the current state.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#npmpublishmajor","title":"npm:publish:major","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>npm version major &amp;&amp; npm publish\n</code></pre> </li> <li> <p>Description:</p> <p>documentation pending</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#npmpublishminor","title":"npm:publish:minor","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>npm version minor &amp;&amp; npm publish\n</code></pre> </li> <li> <p>Description:</p> <p>documentation pending</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#npmpublishpatch","title":"npm:publish:patch","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>npm version patch &amp;&amp; npm publish\n</code></pre> </li> <li> <p>Description:</p> <p>Publish a patch release to the npm registry.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#nsd-debug","title":"nsd-debug","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>yarn build &amp;&amp; node output/node-scripts-docs.js\n</code></pre> </li> <li> <p>Description:</p> <p>Build the latest sources and then use the build output to execute your command. Parameters are passed through by <code>yarn</code>.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#prepack","title":"prepack","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>yarn build\n</code></pre> </li> <li> <p>Description:</p> <p>documentation pending</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#test","title":"test","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>node --experimental-vm-modules $(yarn bin jest)\n</code></pre> </li> <li> <p>Description:</p> <p>Execute all Jest test suites.</p> </li> </ul>"},{"location":"reference/Repository%20Scripts/#testcoverage","title":"test:coverage","text":"<ul> <li>Project: <code>node-scripts-docs</code></li> <li> <p>Source:</p> <pre><code>node --experimental-vm-modules $(yarn bin jest) --coverage\n</code></pre> </li> <li> <p>Description:</p> <p>Execute Jest test suites and calculate code coverage.</p> </li> </ul>"}]}